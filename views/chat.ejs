<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>مكالمة فيديو باستخدام PeerJS</title>
    <link rel="stylesheet" href="/styles.css">
<style>
    body {
        margin: 0;
        display: flex;
        flex-direction: column;
        height: 100vh;
        background-color: #f0f0f0;
        font-family: Arial, sans-serif;
    }
    .video-container {
        flex: 1;
        display: flex;
        justify-content: flex-start; /* لتحريك المتصل إلى اليسار */
        align-items: center;
        position: relative; /* لجعل العناصر تتداخل */
        background-color: #000;
    }
    .local-video {
      top: 60;
    width: 300;
    object-fit: cover;
    height: 150;
    z-index: 1;
    right: 15;
    background-color: #444444;
    position: absolute;
    }
#localVideo{
    top: 60;
    width: 300;
    object-fit: cover;
    height: 150;
    z-index: 1;
    right: 15;
    background-color: #444444;
    position: absolute;
}
#remoteVideo{
 top: 0;
    height: 100%;
    width: 100%;
    left: 0;
    background-color: lightgray;
    position: absolute;
}
    .remote-video {
           top: 0;
    height: 100%;
    width: 100%;
    left: 0;
    background-color: lightgray;
    position: absolute;
    }
    .controls {
        display: flex;
        justify-content: center;
        padding: 10px;
        background-color: #fff;
    }
    .button {
        margin: 0 10px;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        background-color: #007bff;
        color: white;
    }
    .button:hover {
        background-color: #0056b3;
    }
    @media (max-width: 600px) {
        .video-container {
            flex-direction: column;
        }
        .local-video {
          top: 60;
    width: 300;
    object-fit: cover;
    height: 150;
    z-index: 1;
    right: 15;
    background-color: #444444;
        }
        .remote-video {
               top: 0;
    height: 100%;
    width: 100%;
    left: 0;
    background-color: lightgray;
    position: absolute;
}
        }
        .controls {
            flex-direction: column;
        }
    }
</style>
</head>
<body>

    <div class="video-container" id="contt">
        <div class="local-video" id="video1">فيديو الطرف الأول
            <video id="localVideo" autoplay muted></video>
        </div>
        <div class="remote-video" id="video2">فيديو الطرف الثاني
            <video id="remoteVideo" autoplay></video>
        </div>
    </div>
    <div class="controls">
        <button class="button" id="muteButton">كتم الصوت</button>
        <button class="button" id="endCallButton">إنهاء المكالمة</button>
    </div>


    <div id="ng"></div>
    <input type="text" value="<%=namemy%>" name="nam" id="nam">
    <input type="text" value="<%=my_id%>" name="myid" id="myid">
    <input type="text" value="<%=id%>" name="frid_id" id="idfrend">
    <button onclick="insert()"> إرسال</button>

    <% if (resu.length > 0) { %>
        <% resu.forEach(resul => { %>
            <% if (resul.frid_id == my_id) { %>
                <p><%= resul.nam %></p>
                <p><%= resul.myid %></p>
            <% } %>
        <% }) %>
    <% } else { %>
        <p>لايوجد بيانات</p>
    <% } %>
    
    <h1>Data from the Database</h1>
    <table id="data-table">
        <thead>
            <tr>
                <th>Column 1</th>
                <th>Column 2</th>
                <!-- Add more column headers as needed -->
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>

    <script src="/socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/peerjs@1.5.4/dist/peerjs.min.js"></script>
    <script>
        const socket = io();
        let nam = document.getElementById('nam').value;
        let myid = document.getElementById('myid').value;
        let idfrend = document.getElementById('idfrend').value;
      let localVideo = document.getElementById('localVideo');
     let remoteVideo = document.getElementById('remoteVideo');
  let contt = document.getElementById('contt');
       let r = document.getElementById('ng');
        socket.on('data', (data) => {
            const table = document.getElementById('data-table').getElementsByTagName('tbody')[0];
            table.innerHTML = '';
            data.forEach((row) => {
                if (row.myid === idfrend && row.frid_id === myid) {
                    const tr = document.createElement('tr');
                    Object.values(row).forEach((value) => {
                        const td = document.createElement('td');
                        td.textContent = value;
                        tr.appendChild(td);
                    });
                    table.appendChild(tr);
                }
            });
        });

        let peer = new Peer();
        let peerid = null;

        peer.on('open', id => {
            console.log('me', id);
            peerid = id;
        });

        function insert() {
            let myid = {
                myid: peerid,
            };
  let deta={
            nam :document.getElementById('nam').value
 
          };
            socket.emit('reqorst', myid);
  socket.emit('url', deta);
//window.location.href = "/call";
contt.style.display = 'block';
        }

        socket.on('getpeerid', () => {
            socket.emit('sendpeerid', {
                myid: document.getElementById('myid').value,
                peerid: peerid
            });
        });

        socket.on('reccadd', id => {
            console.log(id);
            navigator.mediaDevices.getUserMedia({ video: true, audio: true })
                .then(stream => {
                    localVideo.srcObject = stream;
                    let call = peer.call(id, stream);
                    call.on('stream', remoteStream => {
                        remoteVideo.srcObject = remoteStream;
                       //localVideo.srcObject =remoteStream; 
                    });
                })
                .catch(err => {
                    console.error('Error accessing media devices.', err);
                });
        });
     
        peer.on('call', call => {

            navigator.mediaDevices.getUserMedia({ video: true, audio: true })
                .then(stream => {
     localVideo.srcObject = stream;
                    call.answer(stream);
                    call.on('stream', remoteStream => {
                        remoteVideo.srcObject = remoteStream;
                    });
                })
                .catch(err => {
                    console.error('Error accessing media devices.', err);
                });
        })
     
 socket.on('urls',(deta) => {
  
      r.innerHTML=`
        <div class="video-call-message" >
    <p>مكالمة فيديو واردة...</p>
    <p>${deta.nam}</p>
    <div class="video-call-buttons">
      <button class="answer" onclick="displayMedia()">رد</button>
      <button class="decline">رفض</button>
    </div>
  </div>

      `;
    setTimeout(() => {
           r.style.display = 'none';
        }, 30000);

    }); 

    document.getElementById('muteButton').addEventListener('click', function() {
            // كود كتم الصوت أو تشغيله
            this.textContent = this.textContent === 'كتم الصوت' ? 'تشغيل الصوت' : 'كتم الصوت';
        });
        
        document.getElementById('endCallButton').addEventListener('click', function() {
            // كود لإنهاء المكالمة
            alert('تم إنهاء المكالمة');
        });
    </script>
</body>
</html>
